import { createSlice } from '@reduxjs/toolkit';

import { showSecretSuccess } from 'slices/ShowSecretUISlice';
import { hideModal } from 'slices/ShowSecretUISlice';
import { updateSecretSuccess } from 'slices/MetadataSlice';
import { disconnectUserSuccess } from 'slices/AppUISlice';

type SecretField = {
  id: string;
  content: string;
};

type EditSecretUIState = {
  isEditing: boolean;
  data: null | {
    fields: SecretField[];
  };
};

function getInitialState(): EditSecretUIState {
  return {
    isEditing: false,
    data: null,
  };
}

export const EditSecretUISlice = createSlice({
  name: 'EditSecretUI',
  initialState: getInitialState(),
  reducers: {
    updateData: (
      state,
      action: { type: string; payload: { data: { fields: SecretField[] } } }
    ) => {
      state.isEditing = false;
      state.data = action.payload.data;
    },
    changeField: (state, action) => {
      if (!state.data) return state;
      const { field, value } = action.payload;
      state.isEditing = true;
      const fieldIndex = state.data.fields.findIndex(
        fieldToUpdate => fieldToUpdate.id === field.id
      );
      if (!fieldIndex) return state;
      state.data.fields[fieldIndex].content = value;
    },
  },
  extraReducers: builder => {
    builder
      .addCase(showSecretSuccess, (state, action) => {
        if (!state) return;
        state.isEditing = false;
        state.data = action.payload.secret.data;
      })
      .addCase(hideModal, (state, action) => {
        if (!state) return;
        state.isEditing = false;
        state.data = null;
      })
      .addCase(updateSecretSuccess, (state, action) => {
        if (!state) return;
        state.isEditing = false;
      })
      .addCase(disconnectUserSuccess, getInitialState)
      .addDefaultCase((state, action) => {});
  },
});

// Action creators are generated for each case reducer function
export const { updateData, changeField } = EditSecretUISlice.actions;

export default EditSecretUISlice.reducer;
